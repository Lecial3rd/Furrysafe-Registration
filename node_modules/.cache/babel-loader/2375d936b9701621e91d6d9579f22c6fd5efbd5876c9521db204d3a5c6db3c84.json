{"ast":null,"code":"import { createClient } from '@supabase/supabase-js';\nconst supabaseUrl = 'https://your-supabase-url.supabase.co';\nconst supabaseKey = 'your-anon-key';\nconst supabase = createClient(supabaseUrl, supabaseKey);\nexport default {\n  data() {\n    return {\n      file: null,\n      message: '',\n      messageType: ''\n    };\n  },\n  methods: {\n    handleFileUpload(event) {\n      this.file = event.target.files[0];\n    },\n    async uploadImage() {\n      if (!this.file) {\n        this.message = 'Please select an image to upload.';\n        this.messageType = 'is-danger';\n        return;\n      }\n      try {\n        // Upload the image to Supabase Storage\n        const {\n          data,\n          error\n        } = await supabase.storage.from('your-bucket-name').upload(`public/${this.file.name}`, this.file);\n        if (error) throw error;\n\n        // Get the public URL for the uploaded image\n        const {\n          publicURL\n        } = supabase.storage.from('your-bucket-name').getPublicUrl(`public/${this.file.name}`);\n\n        // Insert the image URL into the tbl_images table\n        const {\n          error: insertError\n        } = await supabase.from('tbl_images').insert([{\n          image_url: publicURL\n        }]);\n        if (insertError) throw insertError;\n        this.message = 'Image uploaded successfully!';\n        this.messageType = 'is-success';\n      } catch (error) {\n        this.message = `Image upload failed: ${error.message}`;\n        this.messageType = 'is-danger';\n      }\n    }\n  }\n};","map":{"version":3,"names":["createClient","supabaseUrl","supabaseKey","supabase","data","file","message","messageType","methods","handleFileUpload","event","target","files","uploadImage","error","storage","from","upload","name","publicURL","getPublicUrl","insertError","insert","image_url"],"sources":["C:\\Users\\Lenovo\\Downloads\\FurrySafe\\furrysafe_registration_testing-main\\front\\src\\views\\ImageUploadView.vue"],"sourcesContent":["<template>\r\n  <div>\r\n    <h1>Upload Image</h1>\r\n    <form @submit.prevent=\"uploadImage\">\r\n      <div class=\"field\">\r\n        <label class=\"label\">Select Image</label>\r\n        <div class=\"control\">\r\n          <input type=\"file\" @change=\"handleFileUpload\" required />\r\n        </div>\r\n      </div>\r\n      <div class=\"field\">\r\n        <div class=\"control\">\r\n          <button class=\"button is-primary\" type=\"submit\">Upload</button>\r\n        </div>\r\n      </div>\r\n    </form>\r\n\r\n    <div v-if=\"message\" class=\"notification\" :class=\"messageType\">\r\n      {{ message }}\r\n    </div>\r\n  </div>\r\n</template>\r\n\r\n<script>\r\nimport { createClient } from '@supabase/supabase-js'\r\n\r\nconst supabaseUrl = 'https://your-supabase-url.supabase.co'\r\nconst supabaseKey = 'your-anon-key'\r\nconst supabase = createClient(supabaseUrl, supabaseKey)\r\n\r\nexport default {\r\n  data() {\r\n    return {\r\n      file: null,\r\n      message: '',\r\n      messageType: ''\r\n    }\r\n  },\r\n  methods: {\r\n    handleFileUpload(event) {\r\n      this.file = event.target.files[0]\r\n    },\r\n    async uploadImage() {\r\n      if (!this.file) {\r\n        this.message = 'Please select an image to upload.'\r\n        this.messageType = 'is-danger'\r\n        return\r\n      }\r\n\r\n      try {\r\n        // Upload the image to Supabase Storage\r\n        const { data, error } = await supabase\r\n          .storage\r\n          .from('your-bucket-name')\r\n          .upload(`public/${this.file.name}`, this.file)\r\n\r\n        if (error) throw error\r\n\r\n        // Get the public URL for the uploaded image\r\n        const { publicURL } = supabase\r\n          .storage\r\n          .from('your-bucket-name')\r\n          .getPublicUrl(`public/${this.file.name}`)\r\n\r\n        // Insert the image URL into the tbl_images table\r\n        const { error: insertError } = await supabase\r\n          .from('tbl_images')\r\n          .insert([{ image_url: publicURL }])\r\n\r\n        if (insertError) throw insertError\r\n\r\n        this.message = 'Image uploaded successfully!'\r\n        this.messageType = 'is-success'\r\n      } catch (error) {\r\n        this.message = `Image upload failed: ${error.message}`\r\n        this.messageType = 'is-danger'\r\n      }\r\n    }\r\n  }\r\n}\r\n</script>\r\n\r\n<style scoped>\r\n.notification {\r\n  margin-top: 1em;\r\n}\r\n.is-success {\r\n  background-color: #48c774;\r\n  color: white;\r\n}\r\n.is-danger {\r\n  background-color: #f14668;\r\n  color: white;\r\n}\r\n</style>\r\n"],"mappings":"AAwBA,SAASA,YAAW,QAAS,uBAAsB;AAEnD,MAAMC,WAAU,GAAI,uCAAsC;AAC1D,MAAMC,WAAU,GAAI,eAAc;AAClC,MAAMC,QAAO,GAAIH,YAAY,CAACC,WAAW,EAAEC,WAAW;AAEtD,eAAe;EACbE,IAAIA,CAAA,EAAG;IACL,OAAO;MACLC,IAAI,EAAE,IAAI;MACVC,OAAO,EAAE,EAAE;MACXC,WAAW,EAAE;IACf;EACF,CAAC;EACDC,OAAO,EAAE;IACPC,gBAAgBA,CAACC,KAAK,EAAE;MACtB,IAAI,CAACL,IAAG,GAAIK,KAAK,CAACC,MAAM,CAACC,KAAK,CAAC,CAAC;IAClC,CAAC;IACD,MAAMC,WAAWA,CAAA,EAAG;MAClB,IAAI,CAAC,IAAI,CAACR,IAAI,EAAE;QACd,IAAI,CAACC,OAAM,GAAI,mCAAkC;QACjD,IAAI,CAACC,WAAU,GAAI,WAAU;QAC7B;MACF;MAEA,IAAI;QACF;QACA,MAAM;UAAEH,IAAI;UAAEU;QAAM,IAAI,MAAMX,QAAO,CAClCY,OAAM,CACNC,IAAI,CAAC,kBAAkB,EACvBC,MAAM,CAAC,UAAU,IAAI,CAACZ,IAAI,CAACa,IAAI,EAAE,EAAE,IAAI,CAACb,IAAI;QAE/C,IAAIS,KAAK,EAAE,MAAMA,KAAI;;QAErB;QACA,MAAM;UAAEK;QAAU,IAAIhB,QAAO,CAC1BY,OAAM,CACNC,IAAI,CAAC,kBAAkB,EACvBI,YAAY,CAAC,UAAU,IAAI,CAACf,IAAI,CAACa,IAAI,EAAE;;QAE1C;QACA,MAAM;UAAEJ,KAAK,EAAEO;QAAY,IAAI,MAAMlB,QAAO,CACzCa,IAAI,CAAC,YAAY,EACjBM,MAAM,CAAC,CAAC;UAAEC,SAAS,EAAEJ;QAAU,CAAC,CAAC;QAEpC,IAAIE,WAAW,EAAE,MAAMA,WAAU;QAEjC,IAAI,CAACf,OAAM,GAAI,8BAA6B;QAC5C,IAAI,CAACC,WAAU,GAAI,YAAW;MAChC,EAAE,OAAOO,KAAK,EAAE;QACd,IAAI,CAACR,OAAM,GAAI,wBAAwBQ,KAAK,CAACR,OAAO,EAAC;QACrD,IAAI,CAACC,WAAU,GAAI,WAAU;MAC/B;IACF;EACF;AACF","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}