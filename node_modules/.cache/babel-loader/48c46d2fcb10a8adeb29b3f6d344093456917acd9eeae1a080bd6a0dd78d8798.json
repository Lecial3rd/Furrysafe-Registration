{"ast":null,"code":"import { supabase } from '../supabaseClient';\nimport { v4 as uuidv4 } from 'uuid';\nexport default {\n  data() {\n    return {\n      images: [],\n      cdnUrl: 'https://lfcvjlhlhbpvzhqodkny.supabase.co/storage/v1/object/public/images/'\n    };\n  },\n  mounted() {\n    this.getImages();\n  },\n  methods: {\n    async getImages() {\n      const {\n        data,\n        error\n      } = await supabase.storage.from('images').list('', {\n        limit: 100,\n        offset: 0,\n        sortBy: {\n          column: 'name',\n          order: 'asc'\n        }\n      });\n      if (data) {\n        this.images = data;\n      } else {\n        alert('Error loading images');\n        console.log(error);\n      }\n    },\n    async uploadImage(event) {\n      const file = event.target.files[0];\n      if (!file) return;\n\n      // Create a unique path for the image\n      const filePath = uuidv4() + '/' + file.name;\n\n      // Upload the image\n      const {\n        data,\n        error\n      } = await supabase.storage.from('images').upload(filePath, file);\n      if (data) {\n        // Refresh the list of images\n        this.getImages();\n      } else {\n        console.log(error);\n        alert('Error uploading image');\n      }\n    },\n    async deleteImage(imageName) {\n      const {\n        error\n      } = await supabase.storage.from('images').remove([imageName]);\n      if (error) {\n        alert('Error deleting image');\n        console.log(error);\n      } else {\n        this.getImages();\n      }\n    }\n  }\n};","map":{"version":3,"names":["supabase","v4","uuidv4","data","images","cdnUrl","mounted","getImages","methods","error","storage","from","list","limit","offset","sortBy","column","order","alert","console","log","uploadImage","event","file","target","files","filePath","name","upload","deleteImage","imageName","remove"],"sources":["C:\\Users\\Lenovo\\Downloads\\FurrySafe\\furrysafe_registration_testing-main\\front\\src\\views\\ImageUploadView.vue"],"sourcesContent":["<template>\r\n  <div class=\"image-upload\">\r\n    <h1>Image Upload</h1>\r\n    <p>Upload an image to your gallery:</p>\r\n    <input type=\"file\" @change=\"uploadImage\" accept=\"image/png, image/jpeg\" />\r\n    <h3>Your Images</h3>\r\n    <div class=\"images\">\r\n      <div v-for=\"image in images\" :key=\"image.name\" class=\"image-card\">\r\n        <img :src=\"cdnUrl + image.name\" alt=\"Uploaded Image\" />\r\n        <button @click=\"deleteImage(image.name)\">Delete</button>\r\n      </div>\r\n    </div>\r\n  </div>\r\n</template>\r\n\r\n<script>\r\nimport { supabase } from '../supabaseClient';\r\nimport { v4 as uuidv4 } from 'uuid';\r\n\r\nexport default {\r\n  data() {\r\n    return {\r\n      images: [],\r\n      cdnUrl: 'https://lfcvjlhlhbpvzhqodkny.supabase.co/storage/v1/object/public/images/',\r\n    };\r\n  },\r\n  mounted() {\r\n    this.getImages();\r\n  },\r\n  methods: {\r\n    async getImages() {\r\n      const { data, error } = await supabase.storage.from('images').list('', {\r\n        limit: 100,\r\n        offset: 0,\r\n        sortBy: { column: 'name', order: 'asc' },\r\n      });\r\n      if (data) {\r\n        this.images = data;\r\n      } else {\r\n        alert('Error loading images');\r\n        console.log(error);\r\n      }\r\n    },\r\n    async uploadImage(event) {\r\n      const file = event.target.files[0];\r\n      if (!file) return;\r\n\r\n      // Create a unique path for the image\r\n      const filePath = uuidv4() + '/' + file.name;\r\n\r\n      // Upload the image\r\n      const { data, error } = await supabase.storage\r\n        .from('images')\r\n        .upload(filePath, file);\r\n\r\n      if (data) {\r\n        // Refresh the list of images\r\n        this.getImages();\r\n      } else {\r\n        console.log(error);\r\n        alert('Error uploading image');\r\n      }\r\n    },\r\n    async deleteImage(imageName) {\r\n      const { error } = await supabase.storage.from('images').remove([imageName]);\r\n      if (error) {\r\n        alert('Error deleting image');\r\n        console.log(error);\r\n      } else {\r\n        this.getImages();\r\n      }\r\n    },\r\n  },\r\n};\r\n</script>\r\n\r\n<style scoped>\r\n.image-upload {\r\n  text-align: center;\r\n  padding: 20px;\r\n}\r\n.images {\r\n  display: flex;\r\n  flex-wrap: wrap;\r\n  justify-content: center;\r\n  gap: 20px;\r\n}\r\n.image-card {\r\n  border: 1px solid #ccc;\r\n  padding: 10px;\r\n}\r\n.image-card img {\r\n  max-width: 100%;\r\n}\r\n</style>\r\n"],"mappings":"AAgBA,SAASA,QAAO,QAAS,mBAAmB;AAC5C,SAASC,EAAC,IAAKC,MAAK,QAAS,MAAM;AAEnC,eAAe;EACbC,IAAIA,CAAA,EAAG;IACL,OAAO;MACLC,MAAM,EAAE,EAAE;MACVC,MAAM,EAAE;IACV,CAAC;EACH,CAAC;EACDC,OAAOA,CAAA,EAAG;IACR,IAAI,CAACC,SAAS,CAAC,CAAC;EAClB,CAAC;EACDC,OAAO,EAAE;IACP,MAAMD,SAASA,CAAA,EAAG;MAChB,MAAM;QAAEJ,IAAI;QAAEM;MAAM,IAAI,MAAMT,QAAQ,CAACU,OAAO,CAACC,IAAI,CAAC,QAAQ,CAAC,CAACC,IAAI,CAAC,EAAE,EAAE;QACrEC,KAAK,EAAE,GAAG;QACVC,MAAM,EAAE,CAAC;QACTC,MAAM,EAAE;UAAEC,MAAM,EAAE,MAAM;UAAEC,KAAK,EAAE;QAAM;MACzC,CAAC,CAAC;MACF,IAAId,IAAI,EAAE;QACR,IAAI,CAACC,MAAK,GAAID,IAAI;MACpB,OAAO;QACLe,KAAK,CAAC,sBAAsB,CAAC;QAC7BC,OAAO,CAACC,GAAG,CAACX,KAAK,CAAC;MACpB;IACF,CAAC;IACD,MAAMY,WAAWA,CAACC,KAAK,EAAE;MACvB,MAAMC,IAAG,GAAID,KAAK,CAACE,MAAM,CAACC,KAAK,CAAC,CAAC,CAAC;MAClC,IAAI,CAACF,IAAI,EAAE;;MAEX;MACA,MAAMG,QAAO,GAAIxB,MAAM,CAAC,IAAI,GAAE,GAAIqB,IAAI,CAACI,IAAI;;MAE3C;MACA,MAAM;QAAExB,IAAI;QAAEM;MAAM,IAAI,MAAMT,QAAQ,CAACU,OAAM,CAC1CC,IAAI,CAAC,QAAQ,EACbiB,MAAM,CAACF,QAAQ,EAAEH,IAAI,CAAC;MAEzB,IAAIpB,IAAI,EAAE;QACR;QACA,IAAI,CAACI,SAAS,CAAC,CAAC;MAClB,OAAO;QACLY,OAAO,CAACC,GAAG,CAACX,KAAK,CAAC;QAClBS,KAAK,CAAC,uBAAuB,CAAC;MAChC;IACF,CAAC;IACD,MAAMW,WAAWA,CAACC,SAAS,EAAE;MAC3B,MAAM;QAAErB;MAAM,IAAI,MAAMT,QAAQ,CAACU,OAAO,CAACC,IAAI,CAAC,QAAQ,CAAC,CAACoB,MAAM,CAAC,CAACD,SAAS,CAAC,CAAC;MAC3E,IAAIrB,KAAK,EAAE;QACTS,KAAK,CAAC,sBAAsB,CAAC;QAC7BC,OAAO,CAACC,GAAG,CAACX,KAAK,CAAC;MACpB,OAAO;QACL,IAAI,CAACF,SAAS,CAAC,CAAC;MAClB;IACF;EACF;AACF,CAAC","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}