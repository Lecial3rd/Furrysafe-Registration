{"ast":null,"code":"import { openBlock as _openBlock, createElementBlock as _createElementBlock, pushScopeId as _pushScopeId, popScopeId as _popScopeId } from \"vue\";\nconst _withScopeId = n => (_pushScopeId(\"data-v-0da1e6a3\"), n = n(), _popScopeId(), n);\nconst _hoisted_1 = {\n  id: \"map\",\n  style: {\n    height: '500px',\n    width: '100%'\n  }\n};\nexport function render(_ctx, _cache, $props, $setup, $data, $options) {\n  return _openBlock(), _createElementBlock(\"div\", _hoisted_1);\n}","map":{"version":3,"names":["id","style","height","width","_createElementBlock","_hoisted_1"],"sources":["C:\\Users\\Lenovo\\Downloads\\FurrySafe\\furrysafe_registration_testing-main\\front\\src\\components\\MapWithPin.vue"],"sourcesContent":["<template>\r\n  <div id=\"map\" :style=\"{ height: '500px', width: '100%' }\"></div>\r\n</template>\r\n\r\n<script>\r\nimport L from 'leaflet';\r\nimport 'leaflet/dist/leaflet.css';\r\n\r\n// Import the custom pin image\r\nimport customPin from '@/assets/custom-pin.png';\r\n\r\nexport default {\r\n  name: 'MapWithPin',\r\n  data() {\r\n    return {\r\n      map: null,\r\n      marker: null,\r\n      customIcon: null,\r\n    };\r\n  },\r\n  mounted() {\r\n    this.initializeMap();\r\n  },\r\n  methods: {\r\n    initializeMap() {\r\n      // Initialize the map and set its view\r\n      this.map = L.map('map').setView([10.3157, 123.8854], 13); // Cebu City coordinates\r\n\r\n      // Add the tile layer (the map itself)\r\n      L.tileLayer('https://{s}.tile.openstreetmap.org/{z}/{x}/{y}.png', {\r\n        maxZoom: 19,\r\n        attribution: 'Â© OpenStreetMap'\r\n      }).addTo(this.map);\r\n\r\n      // Set up the custom icon\r\n      this.customIcon = L.icon({\r\n        iconUrl: customPin, // Custom pin image\r\n        iconSize: [38, 38], // Size of the icon\r\n        iconAnchor: [19, 38], // Anchor point of the icon\r\n        popupAnchor: [0, -38], // Position of the popup relative to the icon\r\n      });\r\n\r\n      // Add a click event to place a marker\r\n      this.map.on('click', this.addMarker);\r\n    },\r\n    addMarker(e) {\r\n      // If there's an existing marker, it will remove it\r\n      if (this.marker) {\r\n        this.map.removeLayer(this.marker);\r\n      }\r\n\r\n      // Add a new marker with the custom icon\r\n      this.marker = L.marker([e.latlng.lat, e.latlng.lng], { icon: this.customIcon }).addTo(this.map);\r\n\r\n      // Optionally, show the coordinates in a popup\r\n      this.marker.bindPopup(`Coordinates: ${e.latlng.lat}, ${e.latlng.lng}`).openPopup();\r\n    }\r\n  }\r\n};\r\n</script>\r\n\r\n<style scoped>\r\n#map {\r\n  height: 100%;\r\n  width: 100%;\r\n}\r\n\r\n.leaflet-container {\r\n  height: 100%;\r\n  width: 100%;\r\n}\r\n</style>\r\n"],"mappings":";;;EACOA,EAAE,EAAC,KAAK;EAAEC,KAAK,EAAE;IAAAC,MAAA;IAAAC,KAAA;EAAA;;;uBAAtBC,mBAAA,CAAgE,OAAhEC,UAAgE","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}